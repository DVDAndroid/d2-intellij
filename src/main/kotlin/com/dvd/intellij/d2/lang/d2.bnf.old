//noinspection SpellCheckingInspectionForFile
{
    parserClass="com.dvd.intellij.d2.lang.D2Parser"

    implements="com.dvd.intellij.d2.lang.D2CompositeElement"
    extends="com.dvd.intellij.d2.lang.D2CompositeElementImpl"

    elementTypeHolderClass="com.dvd.intellij.d2.lang.D2ElementTypes"
    elementTypeClass="com.dvd.intellij.d2.lang.D2ElementType"
    tokenTypeClass="com.dvd.intellij.d2.lang.D2TokenType"
    psiTreeUtilClass="com.dvd.intellij.d2.lang.D2PsiTreeUtil"

    psiClassPrefix="D2"
    psiImplClassSuffix="Impl"
    psiPackage="com.dvd.intellij.d2.lang.psi"
    psiImplPackage="com.dvd.intellij.d2.lang.psi.impl"

    tokens=[
        LBRACE                 = "{"
        RBRACE                 = "}"
        DOT                    = "."
        SEMICOLON              = ";"
        COLON                  = ":"
        ARROW                  = "regexp:-+>"
        REVERSE_ARROW          = "regexp:<-+"
        DOUBLE_HYPHEN_ARROW    = "regexp:--+>"
        DOUBLE_ARROW           = "regexp:<--+>"
        COMMENT                = "regexp:#.*"
        STAR                   = "*"
        TRUE                   = "true"
        FALSE                  = "false"
        NUMERIC_LITERAL        = "regexp:\d+"
        FLOAT_LITERAL          = "regexp:\d+\.\d+"
        STRING_LITERAL         = "regexp:\".*\""
        IDENTIFIER             = "regexp:[a-zA-Z_*0-9\-]*"
        NEWLINE                = "regexp:\r?\n"
    ]
}

File ::= (ShapeDefinitions | COMMENT | <<eof>> | NEWLINE)*

ShapeDefinitions ::= ShapeDefinition (AttributeValueDefinition | AttributeExtras | ConnectionDefinition)

// shape
// shape.subshape
ShapeDefinition ::= IDENTIFIER (DOT ShapeDefinition)*
SubShapeDefinition ::= DOT IDENTIFIER

AttributeExtras ::= COLON (AttributeValue? BlockDefinition?)

// .attribute: value
// .attribute.subattribute: value
AttributeValueDefinition ::= AttributeDefinition+ ValueDefinition

// .attribute
AttributeDefinition ::= DOT IDENTIFIER

// : value
ValueDefinition ::= COLON AttributeValue

AttributeValue ::= IDENTIFIER | STRING_LITERAL | NUMERIC_LITERAL | FLOAT_LITERAL | TRUE | FALSE {
  implements="com.intellij.model.psi.UrlReferenceHost"
}

// shape -> shape
// shape <- shape -> shape
// shape <-> shape: label
// shape -- shape: label {...}
// shape -> shape {...}
ConnectionDefinition ::= (Connection ShapeDefinition)+ AttributeExtras?
Connection ::= ARROW | REVERSE_ARROW | DOUBLE_ARROW | DOUBLE_HYPHEN_ARROW

BlockDefinition ::= LBRACE (BlockBody)* RBRACE
BlockBody ::= IDENTIFIER ValueDefinition | IDENTIFIER AttributeDefinition | ConnectionDefinition | NEWLINE

/*
File ::= (ShapeDefinition | <<eof>> | COMMENT | NEWLINE)*

ShapeDefinition ::= SimpleShapeDeclaration (
      MultipleShapeDefinition
    | ShapeExtraDefinition
    | ShapeAttributesDefinition
    | ShapeConnectionDefinition
)*

// myshape
SimpleShapeDeclaration ::= IDENTIFIER
// shape1; shape2; shape3
MultipleShapeDefinition ::= (SEMICOLON SimpleShapeDeclaration)+
// myshape: Shape { ... }
ShapeExtraDefinition ::= COLON ValueDefinition? ShapeBlockDefinition?
// myshape.shape = cloud
ShapeAttributesDefinition ::= DOT ValueDefinition

ShapeConnectionDefinition ::= UnaryConnectionDefinition+ AttributeDefinition?
// myshape -> othershape, myshape <- othershape, myshape <-> othershape, myshape -- othershape
UnaryConnectionDefinition ::= (ARROW | REVERSE_ARROW | DOUBLE_ARROW | DOUBLE_HYPHEN_ARROW) SimpleShapeDeclaration

// { ... }
ShapeBlockDefinition ::= LBRACE (IDENTIFIER (ShapeExtraDefinition | ShapeAttributesDefinition AttributeDefinition) | NEWLINE)* RBRACE

AttributeDefinition ::= COLON ValueDefinition
ValueDefinition ::= (IDENTIFIER | STRING_LITERAL | NUMERIC_LITERAL | FLOAT_LITERAL | TRUE | FALSE)
*/
//
//// shape
//ShapeDefinition ::= IDENTIFIER (ShapeConnection ShapeLabelDefinition? | ShapeLabelDefinition? ShapeDefinitionBlock | ShapeAttributeDefinition)?
//ShapeConnection ::= ShapeDoubleConnection | ShapeTernaryConnection
//// -> shape2
//ShapeDoubleConnection ::= (ARROW | REVERSE_ARROW | DOUBLE_ARROW | DOUBLE_HYPHEN_ARROW) IDENTIFIER
//// shape2 -- shape3
//ShapeTernaryConnection ::= ShapeDoubleConnection ShapeDoubleConnection
//// : label
//ShapeLabelDefinition ::= COLON STRING_LITERAL
//// { ... }
//ShapeDefinitionBlock ::= LBRACE (AttributeDefinition NEWLINE?)* RBRACE
//
////
//ShapeAttributeDefinition ::= DOT AttributeDefinition
//
//// shape
//AttributeDefinition ::= IDENTIFIER COLON (IDENTIFIER | STRING_LITERAL | NUMERIC_LITERAL | FLOAT_LITERAL)